// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid String @id @default(uuid())

  email String @unique
  first_name String
  last_name String
  password String

  role UserRole @default(CLIENT)

  orders Order[]
  liked_events Event[]
  created_events Event[] @relation("created_events")

  tokens Token[]
}

model Event {
  uuid String @id @default(uuid())

  title String
  description String
  category EventCategory
  date DateTime
  place String
  image Json
  user_id String

  likes_number Int @default(0)
  status EvenStatus @default(SCHEDULED)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  tickets_details Tickets_detail[]
  tickets Ticket[]
  likes User[]
  user User @relation("created_events", fields: [user_id], references: [uuid])
}

model Tickets_detail {
  uuid String @id @default(uuid())
  event_id String
  nominal_price Int
  tickets_available Int

  zone EventZone @default(NO_APPLY)
  tickets_per_person Int @default(1)
  currency Currency @default(USD)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  tickets Ticket[]
  event Event @relation(fields: [event_id], references: [uuid])
}

model Ticket {
  uuid String @id @default(uuid())
  event_id String
  tickets_detail_id String
  discounts Json? // [{description: "without discount", percentage: 0, amount: 0}]
  final_price Int
  order_id String

  tickets_to_buy Int @default(1)
  currency Currency @default(USD)
  status TicketStatus @default(RESERVED)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  order Order @relation(fields: [order_id], references: [uuid])
  tickets_detail Tickets_detail @relation(fields: [tickets_detail_id], references: [uuid])
  event Event @relation(fields: [event_id], references: [uuid])
}

model Order {
  uuid String @id @default(uuid())
  user_id String
  discounts Json? // [{description: "without discount", percentage: 0, amount: 0}]
  
  final_price Int @default(0)
  status OrderStatus @default(CART)
  currency Currency @default(USD)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  tickets Ticket[]

  user User @relation(fields: [user_id], references: [uuid])
}

model Token {
  uuid String @id @default(uuid())
  
  user_id String
  activity Activity @default(AUTHENTICATE)
  @@unique([user_id, activity])

  sub String @unique @default(uuid())
  created_at DateTime @default(now())

  user User @relation(fields: [user_id], references: [uuid])
}

enum EventZone {
  NO_APPLY
  NEAR
  FAR
}

enum UserRole {
  CLIENT
  MANAGER
}

enum Currency {
  USD
}

enum EvenStatus {
  SCHEDULED
  CANCELED
  LIVE
  ENDED
}

enum TicketStatus {
  RESERVED
  PAID
  CANCELED
}

enum OrderStatus {
  CLOSED
  CART
}

enum Activity {
  RESET_PASSWORD
  AUTHENTICATE
}

enum EventCategory {
  MUSIC
  COMEDY
  THEATER
}